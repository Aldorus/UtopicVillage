<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ExodBundleUtopicVillageBundleEntityHelpProxy extends \Exod\Bundle\UtopicVillageBundle\Entity\Help implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setAmount($amount)
    {
        $this->__load();
        return parent::setAmount($amount);
    }

    public function getAmount()
    {
        $this->__load();
        return parent::getAmount();
    }

    public function setReproducible($reproducible)
    {
        $this->__load();
        return parent::setReproducible($reproducible);
    }

    public function getReproducible()
    {
        $this->__load();
        return parent::getReproducible();
    }

    public function setReport($report)
    {
        $this->__load();
        return parent::setReport($report);
    }

    public function getReport()
    {
        $this->__load();
        return parent::getReport();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setPayed($payed)
    {
        $this->__load();
        return parent::setPayed($payed);
    }

    public function getPayed()
    {
        $this->__load();
        return parent::getPayed();
    }

    public function setReceived($received)
    {
        $this->__load();
        return parent::setReceived($received);
    }

    public function getReceived()
    {
        $this->__load();
        return parent::getReceived();
    }

    public function setNotified($notified)
    {
        $this->__load();
        return parent::setNotified($notified);
    }

    public function getNotified()
    {
        $this->__load();
        return parent::getNotified();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setParticipant($participant)
    {
        $this->__load();
        return parent::setParticipant($participant);
    }

    public function getParticipant()
    {
        $this->__load();
        return parent::getParticipant();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function toArray($bool = true)
    {
        $this->__load();
        return parent::toArray($bool);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'description', 'amount', 'reproducible', 'report', 'active', 'payed', 'received', 'notified', 'date', 'user', 'participant');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}