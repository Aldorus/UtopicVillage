<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ExodBundleUtopicVillageBundleEntityMessageProxy extends \Exod\Bundle\UtopicVillageBundle\Entity\Message implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setBody($body)
    {
        $this->__load();
        return parent::setBody($body);
    }

    public function getBody()
    {
        $this->__load();
        return parent::getBody();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setNew($new)
    {
        $this->__load();
        return parent::setNew($new);
    }

    public function getNew()
    {
        $this->__load();
        return parent::getNew();
    }

    public function setAlreadyRead($alreadyRead)
    {
        $this->__load();
        return parent::setAlreadyRead($alreadyRead);
    }

    public function getAlreadyRead()
    {
        $this->__load();
        return parent::getAlreadyRead();
    }

    public function setSender($sender)
    {
        $this->__load();
        return parent::setSender($sender);
    }

    public function getSender()
    {
        $this->__load();
        return parent::getSender();
    }

    public function setReceiver($receiver)
    {
        $this->__load();
        return parent::setReceiver($receiver);
    }

    public function getReceiver()
    {
        $this->__load();
        return parent::getReceiver();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'body', 'date', 'new', 'alreadyRead', 'sender', 'receiver');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}